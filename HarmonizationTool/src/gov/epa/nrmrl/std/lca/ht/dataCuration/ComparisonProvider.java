package gov.epa.nrmrl.std.lca.ht.dataCuration;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import gov.epa.nrmrl.std.lca.ht.tdb.ActiveTDB;
import gov.epa.nrmrl.std.lca.ht.utils.Temporal;
import gov.epa.nrmrl.std.lca.ht.vocabulary.FedLCA;
import gov.epa.nrmrl.std.lca.ht.vocabulary.OpenLCA;

import com.hp.hpl.jena.query.ReadWrite;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.ResIterator;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.vocabulary.DCTerms;
import com.hp.hpl.jena.vocabulary.RDF;
import com.hp.hpl.jena.vocabulary.RDFS;

/**

A ComparisonProvider is the smallest unit of information establishing a computer or human generated relationship between two RDF objects. The ComparisonProvider is "directional" meaning that it is not symmetric. If generated by a computer, the criteria used to establish the relationship is mandatory. Humans may optionally provide comments. The ComparisonProvider should contain things like:

1. A comparedSource - the IRI of one of the two objects being compared
2. A comparedMaster - the IRI of the second of the two objects being compared (must this be a master?)
3. The comparedEquivalence - an instance of the RDF class Equivalence which offers several options indicating "how" the two objects are related: e.g. EquivaEquivalenceCandidate, Equivalent, EquivalenceSubset, EquivalenceSuperset, EquivalenceProxy, NonEquivalent
4. An identification of which AnnotationProvider is the "parent" to the ComparisonProvider
5. A comment in which the justification and/or curator info can be placed

Note: as of 2015-07-01, the java ComparisonProvider object need not have a tdbResource (in which case it is instantiated in
Java only).  This allows for the creation of many Java objects without the need to write to the TDB for each. A batch
of Comparisons can be created in Java, then written to the TDB as a group with one transaction.

 * 
 * @author Tom Transue
 *
 */
public class ComparisonProvider {
	private static final Resource rdfClass = FedLCA.Comparison;
	private Resource tdbResource = null;
	private Resource userDataObject = null;
	private Resource masterDataObject = null;
	private Resource equivalence = null;
	private String comment = "";
	private Date creationDate = new Date();
	private Date lastUpdate = new Date();

	// private AnnotationProvider annotationProvider = null;

	/**
	 * The default constructor does not set any values, but registers it with the ComparisonKeeper.
	 */
	public ComparisonProvider() {
		ComparisonKeeper.addUncommittedComparison(this);
	}

	/**
	 * If commitToTDB is set to <i>true</i>, this ComparisonProvider will be have a new tdbResource committed to the TDB
	 * upon instantiation.
	 * If commitToTDB is set to <i>false</i>, the constructor behaves as the default constructor.
	 * @param : a boolean commitToTDB
	 */
	public ComparisonProvider(boolean commitToTDB) {
		if (commitToTDB) {
			this.tdbResource = ActiveTDB.tsCreateResource(rdfClass);
			AnnotationProvider.updateCurrentAnnotationModifiedDate();
		} else {
			ComparisonKeeper.addUncommittedComparison(this);
		}
		// setAnnotationProvider(AnnotationProvider.getCurrentAnnotation());
	}

	/**
	 * This constructor accepts the tdbResource, then populates itself with calls to the TDB.  Because the
	 * ComparisonProvider is not a new one, it is not necessary to update the AnnotationProvider modified date.
	 * @param tdbResource
	 */
	public ComparisonProvider(Resource tdbResource) {
		this.tdbResource = tdbResource;
		updateSyncDataFromTDB();
		ComparisonKeeper.removeUncommittedComparison(this);
	}

	/**
	 * This constructor accepts the most important three facets of a ComparisonProvider: the userDataObject,'
	 * the masterDataObject, and the type of equivalence.  It does not write to the TDB, so unless used or saved,
	 * this ComparisonProvider is not persistent.
	 * 
	 * @param userDataObject
	 * @param masterDataObject
	 * @param equivalence
	 */
	public ComparisonProvider(Resource userDataObject, Resource masterDataObject, Resource equivalence) {
		// do not check for duplicates
		if (userDataObject.equals(masterDataObject)){
			return;
		}
		this.userDataObject = userDataObject;
		this.masterDataObject = masterDataObject;
		this.equivalence = equivalence;
		ComparisonKeeper.addUncommittedComparison(this);
	}

	// Resource alreadyDefined = findComparisonResource(userDataObject, masterDataObject);
	// if (alreadyDefined != null) {
	// ComparisonProvider existing = new ComparisonProvider(alreadyDefined);
	// this.tdbResource = existing.getTdbResource();
	// setComment(null);
	// } else {
	// this.tdbResource = ActiveTDB.tsCreateResource(rdfClass);
	// setUserDataObject(userDataObject);
	// setMasterDataObject(masterDataObject);
	// }
	// setEquivalence(equivalence);
	// setAnnotationProvider(AnnotationProvider.getCurrentAnnotation());
	// }

	/**
	 * This method can be applied to a single ComparisonProvider that does not have a tdbResource to 
	 * create one for it, thereby committing it to the TDB.  If first checks to see if another TDB resource
	 * exists with the same userObject and masterObject, in which case it updates that one effectively
	 * replacing it, but using this same tdbResource.
	 */
	public void commitToTDB() {
		if (tdbResource != null) {
			return;
		}
		ComparisonProvider sameComparison = findComparison();
		if (sameComparison == null) {
			this.tdbResource = ActiveTDB.tsCreateResource(rdfClass);
		} else {
			sameComparison.setEquivalence(this.equivalence);
			sameComparison.appendToComment("changed to: " + this.comment + "; ");
			setLastUpdate(new Date());
			// sameComparison.setAnnotationProvider(AnnotationProvider.getCurrentAnnotation());
			// AnnotationProvider.updateCurrentAnnotationModifiedDate();
		}
	}

	public void updateSyncDataFromTDB() {
		if (tdbResource == null) {
			return;
		}
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		StmtIterator stmtIterator = tdbResource.listProperties();
		while (stmtIterator.hasNext()) {
			Statement statement = stmtIterator.next();
			if (statement.getPredicate().equals(FedLCA.comparedSource)) {
				this.userDataObject = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(FedLCA.comparedSource)) {
				this.userDataObject = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(FedLCA.comparedMaster)) {
				this.masterDataObject = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(FedLCA.comparedEquivalence)) {
				this.equivalence = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(DCTerms.created)) {
				RDFNode object = statement.getObject();
				if (object.isLiteral()) {
					this.creationDate = Temporal.getDateObject(object.asLiteral());
				}
			} else if (statement.getPredicate().equals(DCTerms.modified)) {
				RDFNode object = statement.getObject();
				if (object.isLiteral()) {
					this.lastUpdate = Temporal.getDateObject(object.asLiteral());
				}
			} else if (statement.getPredicate().equals(RDFS.comment)) {
				this.comment = statement.getObject().asLiteral().getString();
			}
		}
		ActiveTDB.tdbDataset.end();
	}

	public void remove() {
		// --- BEGIN SAFE -WRITE- TRANSACTION ---
		ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
		Model tdbModel = ActiveTDB.getModel(null);
		try {
			tdbModel.removeAll(this.tdbResource, null, null);
			ActiveTDB.tdbDataset.commit();
		} catch (Exception e) {
			System.out.println("remove (ComparisonProvider) failed with Exception: " + e);
			ActiveTDB.tdbDataset.abort();
		} finally {
			ActiveTDB.tdbDataset.end();
		}
		// ---- END SAFE -WRITE- TRANSACTION ----
	}

	public static Resource findComparisonResource(Resource userObject, Resource masterObject) {
		Resource comparisonResource = null;
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		Model tdbModel = ActiveTDB.getModel(null);
		ResIterator resIterator = tdbModel.listResourcesWithProperty(FedLCA.comparedSource, userObject);
		while (resIterator.hasNext()) {
			comparisonResource = resIterator.next();
			if (tdbModel.contains(comparisonResource, FedLCA.comparedMaster, masterObject)) {
				break;
			}
		}
		ActiveTDB.tdbDataset.end();
		return comparisonResource;
	}
	
	public static List<Resource> findComparisonResourcesFromSource(Resource userObject) {
		List<Resource> comparisonResources = new ArrayList<Resource>();
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		Model tdbModel = ActiveTDB.getModel(null);
		ResIterator resIterator = tdbModel.listResourcesWithProperty(FedLCA.comparedSource, userObject);
		while (resIterator.hasNext()) {
			Resource comparisonResource = resIterator.next();
			if (tdbModel.contains(comparisonResource, RDF.type , FedLCA.Comparison)) {
				comparisonResources.add(comparisonResource);
			}
		}
		ActiveTDB.tdbDataset.end();
		return comparisonResources;
	}

	public static List<Resource> findMatchingResourcesFromSource(Resource userObject) {
		List<Resource> masterResources = new ArrayList<Resource>();
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		Model tdbModel = ActiveTDB.getModel(null);
		ResIterator resIterator = tdbModel.listResourcesWithProperty(FedLCA.comparedSource, userObject);
		while (resIterator.hasNext()) {
			Resource comparisonResource = resIterator.next();
			if (tdbModel.contains(comparisonResource, RDF.type , FedLCA.Comparison)) {
				masterResources.add(comparisonResource.getPropertyResourceValue(FedLCA.comparedMaster));
			}
		}
		ActiveTDB.tdbDataset.end();
		return masterResources;
	}

	public Resource findComparisonResource() {
		Resource comparisonResource = null;
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		Model tdbModel = ActiveTDB.getModel(null);
		ResIterator resIterator = tdbModel.listResourcesWithProperty(FedLCA.comparedSource, this.getUserDataObject());
		while (resIterator.hasNext()) {
			comparisonResource = resIterator.next();
			if (tdbModel.contains(comparisonResource, FedLCA.comparedMaster, this.getMasterDataObject())) {
				break;
			}
		}
		ActiveTDB.tdbDataset.end();
		return comparisonResource;
	}

	public ComparisonProvider findComparison() {
		Resource comparisonResource = findComparisonResource();
		if (comparisonResource != null) {
			return new ComparisonProvider(comparisonResource);
		}
		return null;
	}

	public static Resource getRDFClass() {
		return rdfClass;
	}

	public Resource getTdbResource() {
		return tdbResource;
	}

	public void setTdbResource(Resource tdbResource, boolean sync) {
		this.tdbResource = tdbResource;
		if (sync) {
			updateSyncDataFromTDB();
		}
	}

	public Resource getUserDataObject() {
		return userDataObject;
	}

	public void setUserDataObject(Resource userDataObject) {
		if (userDataObject == null) {
			return;
		}
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.userDataObject != null) {
					tdbModel.removeAll(tdbResource, FedLCA.comparedSource, null);
				}
				tdbModel.add(tdbResource, FedLCA.comparedSource, userDataObject);
				tdbModel.removeAll(tdbResource, DCTerms.modified, null);
				tdbModel.add(tdbResource, DCTerms.modified, Temporal.getLiteralFromDate1(new Date()));
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("setUserDataObject failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.userDataObject = userDataObject;
	}

	public Resource getMasterDataObject() {
		return masterDataObject;
	}

	public void setMasterDataObject(Resource masterDataObject) {
		if (masterDataObject == null) {
			return;
		}
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.userDataObject != null) {
					tdbModel.removeAll(tdbResource, FedLCA.comparedSource, null);
				}
				tdbModel.add(tdbResource, FedLCA.comparedSource, masterDataObject);
				tdbModel.removeAll(tdbResource, DCTerms.modified, null);
				tdbModel.add(tdbResource, DCTerms.modified, Temporal.getLiteralFromDate1(new Date()));
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("setMasteDataObject failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.masterDataObject = masterDataObject;
	}

	public Resource getEquivalence() {
		return equivalence;
	}

	public void setEquivalence(Resource equivalence) {
		if (equivalence == null) {
			return;
		}
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.equivalence != null) {
					tdbModel.removeAll(tdbResource, FedLCA.comparedEquivalence, null);
				}
				tdbModel.add(tdbResource, FedLCA.comparedEquivalence, equivalence);
				tdbModel.removeAll(tdbResource, DCTerms.modified, null);
				tdbModel.add(tdbResource, DCTerms.modified, Temporal.getLiteralFromDate1(new Date()));
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("set Equivalence failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.equivalence = equivalence;
	}

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.comment != null) {
					tdbModel.removeAll(tdbResource, RDFS.comment, null);
				}
				if (comment != null) {
					tdbModel.add(tdbResource, RDFS.comment, comment);
				}
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("setComment failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.comment = comment;
	}

	public void appendToComment(String comment) {
		if (comment == null) {
			return;
		}
		if (this.comment == null) {
			setComment(comment);
		} else {
			String newComment = this.comment + "; " + comment;
			setComment(newComment);
		}
	}

	public Date getLastUpdate() {
		return lastUpdate;
	}

	public void updateNow() {
		setLastUpdate(new Date());
	}

	public void setLastUpdate(Date lastUpdate) {
		if (lastUpdate == null) {
			return;
		}
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.lastUpdate != null) {
					tdbModel.removeAll(tdbResource, DCTerms.modified, null);
				}
				tdbModel.add(tdbResource, DCTerms.modified, Temporal.getLiteralFromDate1(new Date()));
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("setLastUpdate failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.lastUpdate = lastUpdate;
	}

	public void syncToTDB() {

		// --- BEGIN SAFE -WRITE- TRANSACTION ---
		ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
		Model tdbModel = ActiveTDB.getModel(null);
		try {
			if (this.tdbResource == null) {
				this.tdbResource = tdbModel.createResource(ComparisonProvider.getRDFClass());
			}
			tdbModel.add(tdbResource, FedLCA.comparedSource, this.getUserDataObject());
			tdbModel.add(tdbResource, FedLCA.comparedMaster, this.getMasterDataObject());
			tdbModel.add(tdbResource, FedLCA.comparedEquivalence, this.getEquivalence());
			Literal literal = tdbModel.createLiteral(this.getComment());
			tdbModel.add(tdbResource, RDFS.comment, literal);
			literal = Temporal.getLiteralFromDate1(this.getLastUpdate());
			tdbModel.add(tdbResource, DCTerms.modified, literal);
			ActiveTDB.tdbDataset.commit();
		} catch (Exception e) {
//			System.out.println("syncToTDB failed with Exception: " + e);
			e.printStackTrace();
			ActiveTDB.tdbDataset.abort();
		} finally {
			ActiveTDB.tdbDataset.end();
		}
		// ---- END SAFE -WRITE- TRANSACTION ----
	}

	public Date getCreationDate() {
		return creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}
}
