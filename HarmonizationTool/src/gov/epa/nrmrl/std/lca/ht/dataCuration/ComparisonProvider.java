package gov.epa.nrmrl.std.lca.ht.dataCuration;

import java.util.Date;

import gov.epa.nrmrl.std.lca.ht.tdb.ActiveTDB;
import gov.epa.nrmrl.std.lca.ht.vocabulary.FedLCA;
import gov.epa.nrmrl.std.lca.ht.vocabulary.OpenLCA;

import com.hp.hpl.jena.query.ReadWrite;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.ResIterator;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.vocabulary.RDF;
import com.hp.hpl.jena.vocabulary.RDFS;

/**

A ComparisonProvider is the smallest unit of information establishing a computer or human generated relationship between two RDF objects. The ComparisonProvider is "directional" meaning that it is not symmetric. If generated by a computer, the criteria used to establish the relationship is mandatory. Humans may optionally provide comments. The ComparisonProvider should contain things like:

1. A comparedSource - the IRI of one of the two objects being compared
2. A comparedMaster - the IRI of the second of the two objects being compared (must this be a master?)
3. The comparedEquivalence - an instance of the RDF class Equivalence which offers several options indicating "how" the two objects are related: e.g. EquivaEquivalenceCandidate, Equivalent, EquivalenceSubset, EquivalenceSuperset, EquivalenceProxy, NonEquivalent
4. An identification of which AnnotationProvider is the "parent" to the ComparisonProvider
5. A comment in which the justification and/or curator info can be placed

Note: as of 2015-07-01, the java ComparisonProvider object need not have a tdbResource (in which case it is instantiated in
Java only).  This allows for the creation of many Java objects without the need to write to the TDB for each. A batch
of Comparisons can be created in Java, then written to the TDB as a group with one transaction.

 * 
 * @author Tom Transue
 *
 */
public class ComparisonProvider {
	private static final Resource rdfClass = FedLCA.Comparison;
	private Resource tdbResource = null;
	private Resource userDataObject = null;
	private Resource masterDataObject = null;
	private Resource equivalence = null;
	private String comment = null;
	private Date lastUpdate = null;
	private AnnotationProvider annotationProvider = null;

	/**
	 * The default constructor does not set any values, but registers it with the ComparisonKeeper.
	 */
	public ComparisonProvider() {
		ComparisonKeeper.addUncommittedComparison(this);
	}

	/**
	 * If commitToTDB is set to <i>true</i>, this ComparisonProvider will be have a new tdbResource committed to the TDB
	 * upon instantiation.
	 * If commitToTDB is set to <i>false</i>, the constructor behaves as the default constructor.
	 * @param : a boolean commitToTDB
	 */
	public ComparisonProvider(boolean commitToTDB) {
		if (commitToTDB) {
			this.tdbResource = ActiveTDB.tsCreateResource(rdfClass);
			AnnotationProvider.updateCurrentAnnotationModifiedDate();
		} else {
			ComparisonKeeper.addUncommittedComparison(this);
		}
		setAnnotationProvider(AnnotationProvider.getCurrentAnnotation());
	}

	/**
	 * This constructor accepts the tdbResource, then populates itself with calls to the TDB.  Because the
	 * ComparisonProvider is not a new one, it is not necessary to update the AnnotationProvider modified date.
	 * @param tdbResource
	 */
	public ComparisonProvider(Resource tdbResource) {
		this.tdbResource = tdbResource;
		updateSyncDataFromTDB();
		ComparisonKeeper.removeUncommittedComparison(this);
	}

	/**
	 * This constructor accepts the most important three facets of a ComparisonProvider: the userDataObject,'
	 * the masterDataObject, and the type of equivalence.  It does not write to the TDB, so unless used or saved,
	 * this ComparisonProvider is not persistent.
	 * 
	 * @param userDataObject
	 * @param masterDataObject
	 * @param equivalence
	 */
	public ComparisonProvider(Resource userDataObject, Resource masterDataObject, Resource equivalence) {
		// do not check for duplicates
		this.userDataObject = userDataObject;
		this.masterDataObject = masterDataObject;
		this.equivalence = equivalence;
	}
//		Resource alreadyDefined = findComparisonResource(userDataObject, masterDataObject);
//		if (alreadyDefined != null) {
//			ComparisonProvider existing = new ComparisonProvider(alreadyDefined);
//			this.tdbResource = existing.getTdbResource();
//			setComment(null);
//		} else {
//			this.tdbResource = ActiveTDB.tsCreateResource(rdfClass);
//			setUserDataObject(userDataObject);
//			setMasterDataObject(masterDataObject);
//		}
//		setEquivalence(equivalence);
//		setAnnotationProvider(AnnotationProvider.getCurrentAnnotation());
//	}

	/**
	 * This method can be applied to a single ComparisonProvider that does not have a tdbResource to 
	 * create one for it, thereby committing it to the TDB.  If first checks to see if another TDB resource
	 * exists with the same userObject and masterObject, in which case it updates that one effectively
	 * replacing it, but using this same tdbResource.
	 */
	public void commitToTDB() {
		if (tdbResource != null) {
			return;
		}
		ComparisonProvider sameComparison = findComparison();
		if (sameComparison == null) {
			this.tdbResource = ActiveTDB.tsCreateResource(rdfClass);
			this.annotationProvider = AnnotationProvider.getCurrentAnnotation();
		} else {
			sameComparison.setEquivalence(this.equivalence);
			sameComparison.appendToComment("changed to: "+this.comment+"; ");
			sameComparison.setAnnotationProvider(AnnotationProvider.getCurrentAnnotation());
			AnnotationProvider.updateCurrentAnnotationModifiedDate();
		}
	}

	public void updateSyncDataFromTDB() {
		if (tdbResource == null) {
			return;
		}
		Resource annotationProviderResource = null;
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		// Model tdbModel = ActiveTDB.getModel(null);
		StmtIterator stmtIterator = tdbResource.listProperties();
		while (stmtIterator.hasNext()) {
			Statement statement = stmtIterator.next();
			if (statement.getPredicate().equals(FedLCA.comparedSource)) {
				this.userDataObject = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(FedLCA.comparedSource)) {
				this.userDataObject = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(FedLCA.comparedMaster)) {
				this.masterDataObject = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(FedLCA.comparedEquivalence)) {
				this.equivalence = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(FedLCA.memberOfCollection)) {
				annotationProviderResource = statement.getObject().asResource();
			} else if (statement.getPredicate().equals(RDFS.comment)) {
				this.comment = statement.getObject().asLiteral().getString();
			}
		}
		ActiveTDB.tdbDataset.end();
		this.annotationProvider = AnnotationProvider.getAnnotationProvider(annotationProviderResource);
	}

	public void remove() {
		// --- BEGIN SAFE -WRITE- TRANSACTION ---
		ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
		// Model tdbModel = ActiveTDB.getModel(null);
		try {
			this.tdbResource.removeProperties();
			ActiveTDB.tdbDataset.commit();
		} catch (Exception e) {
			System.out.println("Creating new ComparisonProvider failed with Exception: " + e);
			ActiveTDB.tdbDataset.abort();
		} finally {
			ActiveTDB.tdbDataset.end();
		}
		// ---- END SAFE -WRITE- TRANSACTION ----
		AnnotationProvider.updateCurrentAnnotationModifiedDate();
	}

	public static Resource findComparisonResource(Resource userObject, Resource masterObject) {
		Resource comparisonResource = null;
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		Model tdbModel = ActiveTDB.getModel(null);
		ResIterator resIterator = tdbModel.listResourcesWithProperty(FedLCA.comparedSource, userObject);
		while (resIterator.hasNext()) {
			comparisonResource = resIterator.next();
			if (tdbModel.contains(comparisonResource, FedLCA.comparedMaster, masterObject)) {
				break;
			}
		}
		ActiveTDB.tdbDataset.end();
		return comparisonResource;
	}

	public Resource findComparisonResource() {
		Resource comparisonResource = null;
		ActiveTDB.tdbDataset.begin(ReadWrite.READ);
		Model tdbModel = ActiveTDB.getModel(null);
		ResIterator resIterator = tdbModel.listResourcesWithProperty(FedLCA.comparedSource, this.getUserDataObject());
		while (resIterator.hasNext()) {
			comparisonResource = resIterator.next();
			if (tdbModel.contains(comparisonResource, FedLCA.comparedMaster, this.getMasterDataObject())) {
				break;
			}
		}
		ActiveTDB.tdbDataset.end();
		return comparisonResource;
	}
	
	public ComparisonProvider findComparison(){
		Resource comparisonResource = findComparisonResource();
		if (comparisonResource != null){
			return new ComparisonProvider(comparisonResource);
		}
		return null;
	}

	public static Resource getRDFClass() {
		return rdfClass;
	}

	public Resource getTdbResource() {
		return tdbResource;
	}

	public void setTdbResource(Resource tdbResource, boolean sync) {
		this.tdbResource = tdbResource;
		if (sync) {
			updateSyncDataFromTDB();
		}
	}

	public Resource getUserDataObject() {
		return userDataObject;
	}

	public void setUserDataObject(Resource userDataObject) {
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			// Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.userDataObject != null) {
					tdbResource.removeAll(FedLCA.comparedSource);
				}
				tdbResource.addProperty(FedLCA.comparedSource, userDataObject);
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("Creating new ComparisonProvider failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.userDataObject = userDataObject;
	}

	public Resource getMasterDataObject() {
		return masterDataObject;
	}

	public void setMasterDataObject(Resource masterDataObject) {
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			// Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.masterDataObject != null) {
					tdbResource.removeAll(FedLCA.comparedMaster);
				}
				tdbResource.addProperty(FedLCA.comparedMaster, masterDataObject);
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("Creating new ComparisonProvider failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.masterDataObject = masterDataObject;
	}

	public Resource getEquivalence() {
		return equivalence;
	}

	public void setEquivalence(Resource equivalence) {
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			// Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.equivalence != null) {
					tdbResource.removeAll(FedLCA.comparedEquivalence);
				}
				tdbResource.addProperty(FedLCA.comparedEquivalence, equivalence);
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("Creating new ComparisonProvider failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.equivalence = equivalence;
	}

	public AnnotationProvider getAnnotationProvider() {
		return annotationProvider;
	}

	// public void setAnnotationResource(Resource annotationResource) {
	// if (this.annotationResource != null) {
	// tdbResource.removeAll(FedLCA.memberOfCollection);
	// }
	// tdbResource.addProperty(FedLCA.memberOfCollection, annotationResource);
	// this.annotationResource = annotationResource;
	// }

	public void setAnnotationProvider(AnnotationProvider annotationProvider) {
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			try {
				if (this.annotationProvider != null) {
					tdbResource.removeAll(FedLCA.memberOfCollection);
				}
				tdbResource.addProperty(FedLCA.memberOfCollection, annotationProvider.getTdbResource());
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("Creating new ComparisonProvider failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.annotationProvider = annotationProvider;
	}

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		if (tdbResource != null) {
			// --- BEGIN SAFE -WRITE- TRANSACTION ---
			ActiveTDB.tdbDataset.begin(ReadWrite.WRITE);
			// Model tdbModel = ActiveTDB.getModel(null);
			try {
				if (this.comment != null) {
					tdbResource.removeAll(RDFS.comment);
				}
				if (comment != null) {
					tdbResource.addLiteral(RDFS.comment, comment);
				}
				ActiveTDB.tdbDataset.commit();
			} catch (Exception e) {
				System.out.println("Creating new ComparisonProvider failed with Exception: " + e);
				ActiveTDB.tdbDataset.abort();
			} finally {
				ActiveTDB.tdbDataset.end();
			}
			// ---- END SAFE -WRITE- TRANSACTION ----
		}
		this.comment = comment;
	}

	public void appendToComment(String comment) {
		if (this.comment == null) {
			setComment(comment);
		} else {
			String newComment = this.comment + "; " + comment;
			setComment(newComment);
		}
	}

	public Date getLastUpdate() {
		return lastUpdate;
	}

	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	public void syncToTDB() {
		if (tdbResource == null) {
			this.tdbResource = ActiveTDB.tsCreateResource(rdfClass);
		}
		setUserDataObject(this.userDataObject);
		setMasterDataObject(this.masterDataObject);
		setEquivalence(this.equivalence);
		setComment(this.comment);
		if (this.annotationProvider == null) {
			this.annotationProvider = AnnotationProvider.getCurrentAnnotation();
		}
		setAnnotationProvider(this.annotationProvider);
	}
}
